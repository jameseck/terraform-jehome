---
#- name: kubeadm script
#  script: kubeadm.sh
#  register: kubeadm_out
#
#- name: dump out
#  debug:
#    var: kubeadm_out
- name: Install Python Pip
  package:
    name: python-pip
    state: present

- name: upgrade Pip
  pip:
    name: pip
    state: latest

- name: Install/Upgrade Python setuptools with Pip
  pip:
    name: setuptools
    state: present
    version: "{{ '>3.3' | default(omit) }}"

- name: Install openshift Pip package
  pip:
    name: openshift
    state: present

- name: Install kubernetes-validate Pip package
  pip:
    name: kubernetes-validate
    state: present

- name: yum upgrade all
  yum:
    name: "*"
    state: latest

- name: Install Docker
  yum:
    name: docker
    state: installed

- name: Enable and Start Docker
  service:
    name: docker
    state: started
    enabled: yes

- name: sysctl bridge ip6tables
  sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: "1"
    sysctl_file: /etc/sysctl.d/k8s.conf
    reload: yes

- name: sysctl bridge iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: "1"
    sysctl_file: /etc/sysctl.d/k8s.conf
    reload: yes

- name: k8s yum repo
  yum_repository:
    name: Kubernetes
    description: Kubernetes packages
    state: present
    enabled: no
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    gpgcheck: yes
    repo_gpgcheck: yes

- name: Disable SeLinux
  selinux:
    state: permissive
    policy: targeted

- name: Install k8s packages
  yum:
    state: installed
    enablerepo: Kubernetes
  with_items:
  - "kubelet-{{ k8s_package_version }}"
  - "kubeadm-{{ k8s_package_version }}"
  - "kubectl-{{ k8s_package_version }}"

- name: Start kubelet service
  service:
    name: kubelet
    state: started
    enabled: yes

- name: Check k8s status
  command: kubectl  get componentstatuses
  changed_when: False
  register: k8s_status

- name: Run kubeadm to init k8s
  command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --kubernetes_version={{ k8s_cluster_version }}
    {{ kubernetes_kubeadm_init_extra_opts }}
  when: k8s_status.rc != 0

- name: Create .kube directory
  file:
    path: /root/.kube
    state: directory
    mode: 0700

- name: Copy k8s kubeconfig
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes

- name: Wait for k8s cluster to come up
  # Using curl here since the uri module requires python-httplib2 and
  # wait_for port doesn't provide health information.
  command: >
    curl --silent --tlsv1.2
    --cert /etc/kubernetes/pki/apiserver-kubelet-client.crt
    --key /etc/kubernetes/pki/apiserver-kubelet-client.key
    --cacert /etc/kubernetes/pki/ca.crt https://{{ ansible_fqdn }}:6443/healthz
  args:
    # Disables the following warning:
    # Consider using get_url or uri module rather than running curl
    warn: no
  register: api_available_output
  until: api_available_output.stdout == 'ok'
  retries: 120
  delay: 1
  changed_when: False
  run_once: True

- name: Get master taint status
  shell: kubectl get node -o json | jq '.items[] | select(.spec.taints != null) .spec.taints'
  changed_when: False
  register: master_taints

- name: taint master k8s nodes
  command: kubectl taint nodes --all node-role.kubernetes.io/master-kubectl taint nodes --all node-role.kubernetes.io/master-
  when: master_taints.stdout | trim != ''

- name: Wait for all control-plane pods become created
  shell: "kubectl get po --namespace=kube-system --selector tier=control-plane --output=jsonpath='{.items[*].metadata.name}'"
  register: control_plane_pods_created
  until: item in control_plane_pods_created.stdout
  retries: 10
  delay: 30
  changed_when: False
  with_items:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: Wait for control-plane pods become ready
  shell: "kubectl wait --namespace=kube-system --for=condition=Ready pods --selector tier=control-plane --timeout=600s"
  changed_when: False
  register: control_plane_pods_ready

- include_tasks: flannel.yml
- include_tasks: localstorage.yml
- include_tasks: helm.yml
- include_tasks: flux.yml
- include_tasks: nginx-ingress.yml
- include_tasks: cert-manager.yml
- include_tasks: root-ca.yml
- include_tasks: gitlab.yml
- include_tasks: gitlab-runner.yml
