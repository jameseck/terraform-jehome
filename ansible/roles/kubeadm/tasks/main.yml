---
#- name: kubeadm script
#  script: kubeadm.sh
#  register: kubeadm_out
#
#- name: dump out
#  debug:
#    var: kubeadm_out
- name: Install python Pip
  package:
    name: python-pip
    state: present

- name: upgrade pip
  pip:
    name: pip
    state: latest

- name: Install/Upgrade Python setuptools with Pip
  pip:
    name: setuptools
    state: present
    version: "{{ '>3.3' | default(omit) }}"

- name: Install openshift Pip package
  pip:
    name: openshift
    state: present

- name: Install kubernetes-validate Pip package
  pip:
    name: kubernetes-validate
    state: present

- name: yum upgrade all
  yum:
    name: "*"
    state: latest

- name: Install Docker
  yum:
    name: docker
    state: installed

- name: Enable and Start Docker
  service:
    name: docker
    state: started
    enabled: yes

- name: sysctl bridge ip6tables
  sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: "1"
    sysctl_file: /etc/sysctl.d/k8s.conf
    reload: yes

- name: sysctl bridge iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: "1"
    sysctl_file: /etc/sysctl.d/k8s.conf
    reload: yes

#- name: k8s sysctl
#  copy:
#    src: sysctl_k8s.conf
#    dest: /etc/sysctl.d/k8s.conf
#  register: k8s_sysctl
#
#- name: Refresh sysctl
#  command: sysctl --system
#  when: k8s_sysctl.changed

- name: k8s yum repo
  yum_repository:
    name: Kubernetes
    description: Kubernetes packages
    state: present
    enabled: no
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    gpgcheck: yes
    repo_gpgcheck: yes

- name: Disable SeLinux
  selinux:
    state: permissive
    policy: targeted

- name: Install k8s packages
  yum:
    state: installed
    enablerepo: Kubernetes
  with_items:
  - "kubelet-{{ k8s_package_version }}"
  - "kubeadm-{{ k8s_package_version }}"
  - "kubectl-{{ k8s_package_version }}"

- name: Start kubelet service
  service:
    name: kubelet
    state: started
    enabled: yes

- name: Check k8s status
  command: kubectl  get componentstatuses
  register: k8s_status

- name: Run kubeadm to init k8s
  command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --kubernetes_version={{ k8s_cluster_version }}
    {{ kubernetes_kubeadm_init_extra_opts }}
  when: k8s_status.rc != 0

- name: Create .kube directory
  file:
    path: /root/.kube
    state: directory
    mode: 0700

- name: Copy k8s kubeconfig
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes

- name: Wait for k8s cluster to come up
  # Using curl here since the uri module requires python-httplib2 and
  # wait_for port doesn't provide health information.
  command: >
    curl --silent --tlsv1.2
    --cert /etc/kubernetes/pki/apiserver-kubelet-client.crt
    --key /etc/kubernetes/pki/apiserver-kubelet-client.key
    --cacert /etc/kubernetes/pki/ca.crt https://{{ ansible_fqdn }}:6443/healthz
  args:
    # Disables the following warning:
    # Consider using get_url or uri module rather than running curl
    warn: no
  register: api_available_output
  until: api_available_output.stdout == 'ok'
  retries: 120
  delay: 1
  changed_when: false
  run_once: true

- name: Get master taint status
#  command: %{raw%} kubectl get nodes -o go-template='{{range $item := .items}}{{with $nodename := $item.metadata.name}}{{range $taint := $item.spec.taints}}{{if and (eq $taint.key "node-role.kubernetes.io/master") (eq $taint.effect "NoSchedule")}}{{printf "%s\n" $nodename}}{{end}}{{end}}{{end}}{{end}}'{%endraw%}
#  command: kubectl get node -o json | jq '.items[].spec.taints'
  shell: kubectl get node -o json | jq '.items[] | select(.spec.taints != null) .spec.taints'
  register: master_taints

- name: taint master k8s nodes
  command: kubectl taint nodes --all node-role.kubernetes.io/master-kubectl taint nodes --all node-role.kubernetes.io/master-
  when: master_taints.stdout | trim != ''

- name: Wait for all control-plane pods become created
  shell: "kubectl get po --namespace=kube-system --selector tier=control-plane --output=jsonpath='{.items[*].metadata.name}'"
  register: control_plane_pods_created
  until: item in control_plane_pods_created.stdout
  retries: 10
  delay: 30
  with_items:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: Wait for control-plane pods become ready
  shell: "kubectl wait --namespace=kube-system --for=condition=Ready pods --selector tier=control-plane --timeout=600s"
  register: control_plane_pods_ready

- include_tasks: flannel.yml
- include_tasks: helm.yml
- include_tasks: flux.yml

- name: Create ServiceAccount for Tiller client
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: tiller
        namespace: kube-system
    validate:
      fail_on_error: yes
      strict: yes


#- name: Create tiller-cluster-role
#  command: kubectl create clusterrolebinding tiller-cluster-role --clusterrole=cluster-admin --serviceaccount=kube-system:tiller

- name: Create ClusterRoleBinding for Tiller Service Account
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: tiller-cluster-role
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
        - kind: ServiceAccount
          name: tiller
          namespace: kube-system
    validate:
      fail_on_error: yes
      strict: yes

- name: Helm init
  command: helm init --upgrade --service-account tiller --history-max 10 --wait

- name: Install Flux Helm CRD
  command: kubectl apply -f https://raw.githubusercontent.com/fluxcd/flux/helm-0.10.1/deploy-helm/flux-helm-release-crd.yaml

- name: Create Flux namespace
  k8s:
    name: flux
    api_version: v1
    kind: Namespace
    state: present

- name: Create Flux private ssh key secret
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: flux-git-auth
        namespace: flux
      stringData:
        identity: >
         {{ lookup('file', '{{ role_path }}/files/flux_ssh_key') }}
      type: Opaque
    validate:
      fail_on_error: yes
      strict: yes

- name: Add flux helm repo
  command: helm repo add fluxcd https://charts.fluxcd.io

- name: Install Flux via Helm
  shell: >
    helm upgrade -i flux \
      --set helmOperator.create=true \
      --set helmOperator.createCRD=false \
      --set git.user=jameseck \
      --set git.email=jameseck@users.noreply.github.com \
      --set git.url=git@github.com:jameseck/flux-get-started \
      --set git.secretName=flux-git-auth \
      --namespace flux \
      --wait \
      fluxcd/flux

- name: Wait for Flux rollout
  command: kubectl -n flux rollout status deployment/flux
